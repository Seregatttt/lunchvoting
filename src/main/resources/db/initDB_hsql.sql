DROP TABLE votes IF EXISTS;
DROP TABLE user_roles IF EXISTS;
DROP TABLE meals IF EXISTS;
DROP TABLE menus IF EXISTS;
DROP TABLE restaurants IF EXISTS;
DROP TABLE users IF EXISTS;

DROP SEQUENCE global_seq IF EXISTS;

CREATE SEQUENCE global_seq AS INTEGER START WITH 10000;

CREATE TABLE users
(
    id       INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    name     VARCHAR(255) NOT NULL,
    email    VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL
);

CREATE UNIQUE INDEX users_unique_email_idx ON users (email);

CREATE TABLE user_roles
(
    user_id INTEGER NOT NULL,
    role    VARCHAR(255),
    CONSTRAINT user_roles_idx UNIQUE (user_id, role),
    FOREIGN KEY (user_id) REFERENCES USERS (id) ON DELETE CASCADE
);

CREATE TABLE restaurants
(
    id      INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    name    VARCHAR(255) NOT NULL,
    address VARCHAR(255) NOT NULL

);

CREATE TABLE menus
(
    id        INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    rest_id   INTEGER NOT NULL,
    date_menu date    NOT NULL,
    CONSTRAINT menu_date_idx UNIQUE (rest_id, date_menu),
    FOREIGN KEY (rest_id) REFERENCES restaurants (id) ON DELETE CASCADE
);

CREATE TABLE meals
(
    id      INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    menu_id INTEGER       NOT NULL,
    name    VARCHAR(255)  NOT NULL,
    price   NUMERIC(5, 2) NOT NULL,
    FOREIGN KEY (menu_id) REFERENCES menus (id) ON DELETE CASCADE
);

CREATE TABLE votes
(   id        INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    user_id   INTEGER   NOT NULL,
    menu_id   INTEGER   NOT NULL,
    date_menu date      NOT NULL,
    date_reg  TIMESTAMP NOT NULL,
    CONSTRAINT user_lunch_idx UNIQUE (user_id, date_menu),
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    FOREIGN KEY (menu_id) REFERENCES menus (id) ON DELETE CASCADE
);